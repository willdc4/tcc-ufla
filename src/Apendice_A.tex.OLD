\begin{center}
  \normalsize{\textbf{APÊNDICE A -- Documentação de leitura rápida do py-cgnat}}
\end{center}

\begin{flushleft}
    
{\large \textbf{py-cgnat}}

Python module for generating CGNAT rules using netmap

\vspace{2mm}

\textbf{Brief}

Python library and CLI program for generating firewall rules to deploy Carrier-Grade NAT, besides translating a given IP and port to its private address and vice versa. The methodology consists in building netmap rules at 1:32 public-private ratio, mapping a range of 2.000 ports for each client. Works for any netmask, since that follow the 1:32 ratio: 

\vspace{4mm}

\begin{tabular}{|c|c|c|}
    \hline
    Private prefix & Public prefix & N. of clients \\ \hline
    ... & ... & ... \\ \hline
    /20 & /25 & 4096 \\ \hline
    /21 & /26 & 2048 \\ \hline
    /22 & /27 & 1024 \\ \hline
    /23 & /28 & 512 \\ \hline
    /24 & /29 & 256 \\ \hline
    /25 & /30 & 128 \\ \hline
    /26 & /31 & 64 \\ \hline
    /27 & /32 & 32 \\ \hline
\end{tabular} 

\vspace{7mm}

\textbf{Supported Platforms}

\begin{itemize}
    \item MikroTik RouterOS
\end{itemize} 

\textbf{Requirements}

\begin{itemize}
    \item Python 3.7+
\end{itemize} 

\textbf{How to install it?}

Installation can just being done with {\tt pip}: 

{\tt pip install pycgnat}

\vspace{2mm}

\textbf{How to use it?}

\textbf{1. Command Line Interface}

For \textbf{generating} the rules, you can print it in console or save it to a file: 

\begin{verbatim}
pycgnat 100.64.0.0/20 203.0.113.0/25 gen routeros filename.rsc
pycgnat 100.64.0.0/20 203.0.113.0/25 gen routeros
\end{verbatim}

    For \textbf{translating} a private IP to its public one, use the {\tt direct} option:
    
\begin{verbatim}
pycgnat 100.64.0.0/20 203.0.113.0/25 trans --direct 100.64.2.15
pycgnat 100.64.0.0/20 203.0.113.0/25 trans -d 100.64.2.15
\end{verbatim}

For \textbf{translatig} a public IP and port to its private IP correspondent, use the {\tt reverse} option:

\begin{verbatim}
pycgnat 100.64.0.0/20 203.0.113.0/25 trans --reverse 203.0.113.20:13578
pycgnat 100.64.0.0/20 203.0.113.0/25 trans -r 203.0.113.20:13578
\end{verbatim}

The CLI includes useful \textbf{help} command (supported by {\tt argparse} framework), so just type:

\begin{verbatim}
pycgnat --help
pycgnat -h
\end{verbatim}

\vspace{2mm}

\textbf{2. Python library}

You can use the functionalities directly in Python lang. Just \textbf{import} the wanted module to your program:

\begin{verbatim}
from pycgnat.translator.reverse import cgnat_reverse
dic = cgnat_reverse(privnet, pubnet, IPv4Address('203.0.113.20'), 13578)
print(dic['private_ip'])
\end{verbatim}

The full {\tt pycgnat}'s documentation is written in the source-code. 

\vspace{5mm}

\textbf{Future works}

\begin{itemize}
    \item Add support for other platfoms (I'm using MikroTik for while, so this is the reason for only supporting it at first version).
\end{itemize}

\end{flushleft}







